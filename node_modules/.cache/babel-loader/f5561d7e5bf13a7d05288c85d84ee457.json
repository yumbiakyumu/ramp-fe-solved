{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useEmployees() {\n  _s();\n\n  const {\n    fetchWithCache\n  } = useCustomFetch();\n  const [employees, setEmployees] = useState(null);\n  const [employeesLoading, setEmployeesLoading] = useState(true);\n  const fetchAll = useCallback(async () => {\n    setEmployeesLoading(true);\n\n    try {\n      const employeesData = await fetchWithCache(\"employees\");\n      setEmployees(employeesData);\n    } catch (error) {\n      console.error('Failed to fetch employees:', error);\n    } finally {\n      setEmployeesLoading(false);\n    }\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setEmployees(null);\n  }, []);\n  return {\n    data: employees,\n    loading: employeesLoading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(useEmployees, \"enI3nBl4D1PGZJ5zz1h1DTtqxzA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useEmployees","fetchWithCache","employees","setEmployees","employeesLoading","setEmployeesLoading","fetchAll","employeesData","error","console","invalidateData","data","loading"],"sources":["C:/Users/Boniface/Desktop/SCH 4.2/bi assignment/ramp-fe-challenge/src/hooks/useEmployees.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { Employee } from \"../utils/types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\nimport { EmployeeResult } from \"./types\"\n\nexport function useEmployees(): EmployeeResult {\n  const { fetchWithCache } = useCustomFetch()\n  const [employees, setEmployees] = useState<Employee[] | null>(null)\n  const [employeesLoading, setEmployeesLoading] = useState(true)\n\n  const fetchAll = useCallback(async () => {\n    setEmployeesLoading(true)\n    try {\n      const employeesData = await fetchWithCache<Employee[]>(\"employees\")\n      setEmployees(employeesData)\n    } catch (error) {\n      console.error('Failed to fetch employees:', error)\n    } finally {\n      setEmployeesLoading(false)\n    }\n  }, [fetchWithCache])\n\n  const invalidateData = useCallback(() => {\n    setEmployees(null)\n  }, [])\n\n  return { data: employees, loading: employeesLoading, fetchAll, invalidateData }\n}"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AAGA,OAAO,SAASC,YAAT,GAAwC;EAAA;;EAC7C,MAAM;IAAEC;EAAF,IAAqBF,cAAc,EAAzC;EACA,MAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAoB,IAApB,CAA1C;EACA,MAAM,CAACM,gBAAD,EAAmBC,mBAAnB,IAA0CP,QAAQ,CAAC,IAAD,CAAxD;EAEA,MAAMQ,QAAQ,GAAGT,WAAW,CAAC,YAAY;IACvCQ,mBAAmB,CAAC,IAAD,CAAnB;;IACA,IAAI;MACF,MAAME,aAAa,GAAG,MAAMN,cAAc,CAAa,WAAb,CAA1C;MACAE,YAAY,CAACI,aAAD,CAAZ;IACD,CAHD,CAGE,OAAOC,KAAP,EAAc;MACdC,OAAO,CAACD,KAAR,CAAc,4BAAd,EAA4CA,KAA5C;IACD,CALD,SAKU;MACRH,mBAAmB,CAAC,KAAD,CAAnB;IACD;EACF,CAV2B,EAUzB,CAACJ,cAAD,CAVyB,CAA5B;EAYA,MAAMS,cAAc,GAAGb,WAAW,CAAC,MAAM;IACvCM,YAAY,CAAC,IAAD,CAAZ;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEQ,IAAI,EAAET,SAAR;IAAmBU,OAAO,EAAER,gBAA5B;IAA8CE,QAA9C;IAAwDI;EAAxD,CAAP;AACD;;GAtBeV,Y;UACaD,c"},"metadata":{},"sourceType":"module"}