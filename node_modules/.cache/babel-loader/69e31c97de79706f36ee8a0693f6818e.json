{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n// Approach taken:\n// Part 1:\n// The goal is to ensure that the employee filter stops showing \"Loading employees..\" as soon as the request for employees is succeeded, even if other data is still loading.\n// In the old code, there was no separate loading state for employees, so the loading state was tied to the overall loading state, which caused the issue.\n// The new code introduces a separate loading state, employeesLoading, to track the loading state specifically for employees.\n// Part 2:\n// Additionally, when new transactions are loaded, the employee filter should not show \"Loading employees...\" again, as employees are already loaded.\n// To address this, the new code ensures that the loading state for employees is set to true before fetching new employees data when the \"View more\" button is clicked,\n// and it sets the loading state to false after fetching, ensuring that the filter does not show \"Loading employees...\" again unnecessarily.\nexport function useEmployees() {\n  _s();\n\n  const {\n    fetchWithCache\n  } = useCustomFetch();\n  const [employees, setEmployees] = useState(null);\n  const [employeesLoading, setEmployeesLoading] = useState(true); // New loading state for employees\n\n  const fetchAll = useCallback(async () => {\n    setEmployeesLoading(true); // Set loading state to true before fetching\n\n    const employeesData = await fetchWithCache(\"employees\");\n    setEmployees(employeesData);\n    setEmployeesLoading(false); // Set loading state to false after fetching\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setEmployees(null);\n  }, []);\n  return {\n    data: employees,\n    loading: employeesLoading,\n    fetchAll,\n    invalidateData\n  }; // Return employeesLoading instead of loading\n}\n\n_s(useEmployees, \"enI3nBl4D1PGZJ5zz1h1DTtqxzA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useEmployees","fetchWithCache","employees","setEmployees","employeesLoading","setEmployeesLoading","fetchAll","employeesData","invalidateData","data","loading"],"sources":["C:/Users/Boniface/Desktop/SCH 4.2/bi assignment/ramp-fe-challenge/src/hooks/useEmployees.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { Employee } from \"../utils/types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\nimport { EmployeeResult } from \"./types\"\n\n// Approach taken:\n// Part 1:\n// The goal is to ensure that the employee filter stops showing \"Loading employees..\" as soon as the request for employees is succeeded, even if other data is still loading.\n// In the old code, there was no separate loading state for employees, so the loading state was tied to the overall loading state, which caused the issue.\n// The new code introduces a separate loading state, employeesLoading, to track the loading state specifically for employees.\n\n// Part 2:\n// Additionally, when new transactions are loaded, the employee filter should not show \"Loading employees...\" again, as employees are already loaded.\n// To address this, the new code ensures that the loading state for employees is set to true before fetching new employees data when the \"View more\" button is clicked,\n// and it sets the loading state to false after fetching, ensuring that the filter does not show \"Loading employees...\" again unnecessarily.\n\n\nexport function useEmployees(): EmployeeResult {\n  const { fetchWithCache } = useCustomFetch()\n  const [employees, setEmployees] = useState<Employee[] | null>(null)\n  const [employeesLoading, setEmployeesLoading] = useState(true) // New loading state for employees\n\n  const fetchAll = useCallback(async () => {\n    setEmployeesLoading(true) // Set loading state to true before fetching\n    const employeesData = await fetchWithCache<Employee[]>(\"employees\")\n    setEmployees(employeesData)\n    setEmployeesLoading(false) // Set loading state to false after fetching\n  }, [fetchWithCache])\n\n  const invalidateData = useCallback(() => {\n    setEmployees(null)\n  }, [])\n\n  return { data: employees, loading: employeesLoading, fetchAll, invalidateData } // Return employeesLoading instead of loading\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA,OAAO,SAASC,YAAT,GAAwC;EAAA;;EAC7C,MAAM;IAAEC;EAAF,IAAqBF,cAAc,EAAzC;EACA,MAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAoB,IAApB,CAA1C;EACA,MAAM,CAACM,gBAAD,EAAmBC,mBAAnB,IAA0CP,QAAQ,CAAC,IAAD,CAAxD,CAH6C,CAGkB;;EAE/D,MAAMQ,QAAQ,GAAGT,WAAW,CAAC,YAAY;IACvCQ,mBAAmB,CAAC,IAAD,CAAnB,CADuC,CACb;;IAC1B,MAAME,aAAa,GAAG,MAAMN,cAAc,CAAa,WAAb,CAA1C;IACAE,YAAY,CAACI,aAAD,CAAZ;IACAF,mBAAmB,CAAC,KAAD,CAAnB,CAJuC,CAIZ;EAC5B,CAL2B,EAKzB,CAACJ,cAAD,CALyB,CAA5B;EAOA,MAAMO,cAAc,GAAGX,WAAW,CAAC,MAAM;IACvCM,YAAY,CAAC,IAAD,CAAZ;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEM,IAAI,EAAEP,SAAR;IAAmBQ,OAAO,EAAEN,gBAA5B;IAA8CE,QAA9C;IAAwDE;EAAxD,CAAP,CAhB6C,CAgBmC;AACjF;;GAjBeR,Y;UACaD,c"},"metadata":{},"sourceType":"module"}