{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const [approvalChanges, setApprovalChanges] = useState({}); // Load approvalChanges from local storage when the component is mounted\n\n  useEffect(() => {\n    const savedApprovalChanges = localStorage.getItem('approvalChanges');\n\n    if (savedApprovalChanges) {\n      setApprovalChanges(JSON.parse(savedApprovalChanges));\n    }\n  }, []); // Save approvalChanges to local storage whenever it changes\n\n  useEffect(() => {\n    localStorage.setItem('approvalChanges', JSON.stringify(approvalChanges));\n  }, [approvalChanges]);\n  const fetchById = useCallback(async employeeId => {\n    const data = await fetchWithCache(\"transactionsByEmployee\", {\n      employeeId\n    });\n\n    if (data) {\n      // Check if data is not null\n      // Apply approval changes to fetched transactions\n      const updatedTransactions = data.map(transaction => {\n        var _approvalChanges$tran;\n\n        return { ...transaction,\n          approved: (_approvalChanges$tran = approvalChanges[transaction.id]) !== null && _approvalChanges$tran !== void 0 ? _approvalChanges$tran : transaction.approved\n        };\n      });\n      setTransactionsByEmployee(updatedTransactions);\n    }\n  }, [fetchWithCache, approvalChanges]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  const toggleApproval = useCallback(async transactionId => {\n    // Toggle the approval status in the local state\n    setApprovalChanges(prev => ({ ...prev,\n      [transactionId]: !prev[transactionId]\n    })); // Send a request to the server to update the approval status\n\n    await fetch(`/api/transactions/${transactionId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        approved: !approvalChanges[transactionId]\n      })\n    });\n  }, [approvalChanges]);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData,\n    toggleApproval\n  };\n}\n\n_s(useTransactionsByEmployee, \"icUyscCAkNIKFMCjiZLWJTOijv4=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useEffect","useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","approvalChanges","setApprovalChanges","savedApprovalChanges","localStorage","getItem","JSON","parse","setItem","stringify","fetchById","employeeId","data","updatedTransactions","map","transaction","approved","id","invalidateData","toggleApproval","transactionId","prev","fetch","method","headers","body"],"sources":["C:/Users/Boniface/Desktop/SCH 4.2/bi assignment/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useEffect, useCallback, useState } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function useTransactionsByEmployee() {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null)\n  const [approvalChanges, setApprovalChanges] = useState<Record<string, boolean>>({})\n\n  // Load approvalChanges from local storage when the component is mounted\n  useEffect(() => {\n    const savedApprovalChanges = localStorage.getItem('approvalChanges')\n    if (savedApprovalChanges) {\n      setApprovalChanges(JSON.parse(savedApprovalChanges))\n    }\n  }, [])\n\n  // Save approvalChanges to local storage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('approvalChanges', JSON.stringify(approvalChanges))\n  }, [approvalChanges])\n\n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n        \"transactionsByEmployee\",\n        {\n          employeeId,\n        }\n      )\n\n      if (data) { // Check if data is not null\n        // Apply approval changes to fetched transactions\n        const updatedTransactions = data.map(transaction => ({\n          ...transaction,\n          approved: approvalChanges[transaction.id] ?? transaction.approved,\n        }))\n\n        setTransactionsByEmployee(updatedTransactions)\n      }\n    },\n    [fetchWithCache, approvalChanges]\n  )\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null)\n  }, [])\n\n  const toggleApproval = useCallback(async (transactionId: string) => {\n    // Toggle the approval status in the local state\n    setApprovalChanges(prev => ({\n      ...prev,\n      [transactionId]: !prev[transactionId],\n    }))\n\n    // Send a request to the server to update the approval status\n    await fetch(`/api/transactions/${transactionId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        approved: !approvalChanges[transactionId],\n      }),\n    })\n  }, [approvalChanges])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData, toggleApproval }\n}\n"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,WAApB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAqC;EAAA;;EAC1C,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDN,QAAQ,CAAuB,IAAvB,CAApE;EACA,MAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAA0B,EAA1B,CAAtD,CAH0C,CAK1C;;EACAF,SAAS,CAAC,MAAM;IACd,MAAMW,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAA7B;;IACA,IAAIF,oBAAJ,EAA0B;MACxBD,kBAAkB,CAACI,IAAI,CAACC,KAAL,CAAWJ,oBAAX,CAAD,CAAlB;IACD;EACF,CALQ,EAKN,EALM,CAAT,CAN0C,CAa1C;;EACAX,SAAS,CAAC,MAAM;IACdY,YAAY,CAACI,OAAb,CAAqB,iBAArB,EAAwCF,IAAI,CAACG,SAAL,CAAeR,eAAf,CAAxC;EACD,CAFQ,EAEN,CAACA,eAAD,CAFM,CAAT;EAIA,MAAMS,SAAS,GAAGjB,WAAW,CAC3B,MAAOkB,UAAP,IAA8B;IAC5B,MAAMC,IAAI,GAAG,MAAMf,cAAc,CAC/B,wBAD+B,EAE/B;MACEc;IADF,CAF+B,CAAjC;;IAOA,IAAIC,IAAJ,EAAU;MAAE;MACV;MACA,MAAMC,mBAAmB,GAAGD,IAAI,CAACE,GAAL,CAASC,WAAW;QAAA;;QAAA,OAAK,EACnD,GAAGA,WADgD;UAEnDC,QAAQ,2BAAEf,eAAe,CAACc,WAAW,CAACE,EAAb,CAAjB,yEAAqCF,WAAW,CAACC;QAFN,CAAL;MAAA,CAApB,CAA5B;MAKAhB,yBAAyB,CAACa,mBAAD,CAAzB;IACD;EACF,CAlB0B,EAmB3B,CAAChB,cAAD,EAAiBI,eAAjB,CAnB2B,CAA7B;EAsBA,MAAMiB,cAAc,GAAGzB,WAAW,CAAC,MAAM;IACvCO,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,MAAMmB,cAAc,GAAG1B,WAAW,CAAC,MAAO2B,aAAP,IAAiC;IAClE;IACAlB,kBAAkB,CAACmB,IAAI,KAAK,EAC1B,GAAGA,IADuB;MAE1B,CAACD,aAAD,GAAiB,CAACC,IAAI,CAACD,aAAD;IAFI,CAAL,CAAL,CAAlB,CAFkE,CAOlE;;IACA,MAAME,KAAK,CAAE,qBAAoBF,aAAc,EAApC,EAAuC;MAChDG,MAAM,EAAE,KADwC;MAEhDC,OAAO,EAAE;QACP,gBAAgB;MADT,CAFuC;MAKhDC,IAAI,EAAEnB,IAAI,CAACG,SAAL,CAAe;QACnBO,QAAQ,EAAE,CAACf,eAAe,CAACmB,aAAD;MADP,CAAf;IAL0C,CAAvC,CAAX;EASD,CAjBiC,EAiB/B,CAACnB,eAAD,CAjB+B,CAAlC;EAmBA,OAAO;IAAEW,IAAI,EAAEb,sBAAR;IAAgCD,OAAhC;IAAyCY,SAAzC;IAAoDQ,cAApD;IAAoEC;EAApE,CAAP;AACD;;GAhEevB,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}